# a workaround for find_package(OpenCV)'s conflict with CUDA in CMake 3.8
# add_subdirectory(/path/to/this/folder)
# target_link_libraries(your_awesome_project PRIVATE|PUBLIC|INTERFACE opencv), or
# target_link_libraries(your_awesome_project PRIVATE|PUBLIC|INTERFACE opencv_core), or
# target_link_libraries(your_awesome_project PRIVATE|PUBLIC|INTERFACE opencv_highgui), etc ...
# if OpenCV is not located on the default searching path, set OPENCV_DIR to OpenCV in your
# system before add_subdirectory(/path/to/this/folder)

cmake_minimum_required(VERSION 3.8)
project(opencv)
if (DEFINED USE_OPENCV3)
list(APPEND OPENCV_MODULE_LIST calib3d3 contrib3 core3 features2d3 flann3 gpu3)
list(APPEND OPENCV_MODULE_LIST highgui3 imgproc3 legacy3 ml3 objdetect3 ocl3)
list(APPEND OPENCV_MODULE_LIST photo3 stitching3 superres3 ts3 video3 videostab3)
list(APPEND OPENCV_MODULE_LIST cudaarithm3 cudabgsegm3 cudacodec3 cudafeatures2d3)
list(APPEND OPENCV_MODULE_LIST cudafilters3 cudaimgproc3 cudalegacy3 cudaobjdetect3)
list(APPEND OPENCV_MODULE_LIST cudaoptflow3 cudastereo3 cudawarping3 cudev3)
list(APPEND OPENCV_MODULE_LIST imgcodecs3 shape3 videoio3)
else()
list(APPEND OPENCV_MODULE_LIST calib3d contrib core features2d flann gpu)
list(APPEND OPENCV_MODULE_LIST highgui imgproc legacy ml objdetect ocl)
list(APPEND OPENCV_MODULE_LIST photo stitching superres ts video videostab)
list(APPEND OPENCV_MODULE_LIST cudaarithm cudabgsegm cudacodec cudafeatures2d)
list(APPEND OPENCV_MODULE_LIST cudafilters cudaimgproc cudalegacy cudaobjdetect)
list(APPEND OPENCV_MODULE_LIST cudaoptflow cudastereo cudawarping cudev)
list(APPEND OPENCV_MODULE_LIST imgcodecs shape videoio)
endif()
add_library(opencv INTERFACE)
foreach(MODULE ${OPENCV_MODULE_LIST})
  if(DEFINED OPENCV_DIR)
    find_library(OPENCV_${MODULE}_LIBRARY opencv_${MODULE} HINTS ${OPENCV_DIR} PATH_SUFFIXES lib NO_DEFAULT_PATH)
  else()
    find_library(OPENCV_${MODULE}_LIBRARY opencv_${MODULE})
  endif()

  if(OPENCV_${MODULE}_LIBRARY)
    message(STATUS "opencv_${MODULE} library: " ${OPENCV_${MODULE}_LIBRARY})
    add_library(opencv_${MODULE} INTERFACE)
    target_link_libraries(opencv_${MODULE} INTERFACE ${OPENCV_${MODULE}_LIBRARY})
    if(DEFINED OPENCV_DIR)
      target_include_directories(opencv_${MODULE} INTERFACE $<BUILD_INTERFACE:${OPENCV_DIR}/include>$<INSTALL_INTERFACE:>)
    endif()
    target_link_libraries(opencv INTERFACE opencv_${MODULE})
  endif()
endforeach()
